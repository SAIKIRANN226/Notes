In this session we have created below resources using terraform code instead of creating manually in aws.
- VPC 
- Internet Gateway
- Public, Private and Database subnets
- Database subnet group since database has different behaviour
- Elastic_ip
- NAT Gateway
- Public, Private, and Database route tables
- Added Public, Private, and Database routes
- Public, Private, and Database route table associations
- Next thing is peering ? it may not require for everyone, when this peering is useful ? bydefault
  peering connection between two VPC's is not possible, if we want to connect with the resources which 
  are in another VPC, then you require peering, for example big projects like banking they dont depend on
  one company, they tie up with multiple companies and these companies deals different module like one
  company is dealing web module, another is dealing cart module, another is dealing shipping module etc.
  That means these companies have different accounts, so to collaborate with other VPC's which are 
  present in different companies, then we need VPC peering connection. So users can decide if peering is
  required or not ? if required they have to give peering VPC id, if they are not giving we can consider
  default VPC.
- For example consider Requestor --> Roboshop and Acceptor --> User provided VPC or Default VPC

# Before creating route tables and association, we are creating EIP and NATgateway and
  remaining
# How to refer terraform module in github? ---> source = "git::<https URL>ref=main

Points to remember
*******************
- We need terraform to create 100 % project of the infrastructure, not just by creating few resources 
  like VPC or SG etc.
- In this class we continue from creating database subnet.
- 
