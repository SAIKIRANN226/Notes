Note:- Dont forget to put ".gitignore" file, better to put in the root folder in terraform not only in terraform root folder, for example if you are creating any other new folder to work in that, then you need 
to put there also, because when you do "terraform init" then terraform will download the provider and this provider memory is almost 350mb. Github is only to store code not software (or) .exe files, so github will automatically reject, so thats why .gitignore is important here (or) A .gitignore file tells to Git which 
files or directories to ignore (i.e., not track or commit) in your repository so that we can 
1. Avoid committing sensitive files (e.g., credentials).
2. Skip auto-generated or local-only files.
3. Keep the repository clean and portable

Terraform.tfvars, instance_type = "t3.small" 
---------------------------------------------
- If you dont give the default value in the variables.tf, terraform will ask for the prompt, so if 
  you create a terraform.tfvars and declare value in it, then terraform.tfvars will overwrite variables.tf, 
  by taking the value of terraform.tfvars only.
- We can also give from the command prompt by using the below command
  "terraform plan -var="instance_type=t3.medium"
- Here terraform.tfvars name is not mandatory we can use any name like "saikiran.tfvars" and this will 
  become file and we can pass variable file by using "terraform plan -var-file="saikiran.tfvars"
- Environment variable.

Variable preferences in terraform (VS)
---------------------------------------
1. command line ---> terraform plan -var="instance_type=t3.small"
2. -var-file ---> terraform plan -var-file="saikiran.tfvars"
3. terraform.tfvars 
4. ENV variables. If you dont find in any of the above, then terraform will prompt for the value.

Conditions (VS)
----------------
if(expression) {
	if true this will run
}
else {
	if false this will run
} 

We have one line condition also that is 
----------------------------------------
Expression ? "this will run if true" : "this will run if false" ---> Terraform will follow this only

Loops are two types
--------------------
1. Count based loop --> To iterate list, like creating multiple instances.
2. For_each loop --> To iterate maps, like creating multiple route53 records.

Functions (VS)
---------------
It will do some work, if we give some input and it will take this input and give us output. Here in 
terraform we cannot create our own functions but terraform itself has some functions we need to use 
that only. Example:- max(5,12,23) --> max is the function and we are giving inputs 5,12,23 then terraform
will give output that is 23, similarly we have other functions also, and we have used length function 
like this "length(var.instance_names)" this will calculate the length in list automatically.

Locals in terraform
--------------------
Locals is just like variables but it has some extra capabilities, you can keep functions,expressions,
and conditions inside a local and use them anywhere in the script and the locals syntax is below.
          locals {
             name = "saikiran"
             training = "devops"
             instance_type = var.isProd ? "t3.small" : "t2.micro"
          }
Then how to call a local ---> "local.instance_type"

Points to remember
*******************
- You need to see the output.tf also in count folder VS, output is nothing but attributes reference,
  we can see this in terraform document, like for example you have created ec2 instance but we need 
  to know few output like what is PublicIP or PrivateIP etc. Output block is used to print the output
  of the resources in the terminal.
- Important point is that you must save all files of terraform then only run the terraform commands.
- How to See Git directory size ? "du -sh .git" useful when it is slow while pushing to the github
  but still i dont get it need to know this later.
